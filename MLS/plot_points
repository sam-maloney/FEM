#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Feb  4 10:09:36 2020

@author: samal
"""

import numpy as np
# import scipy.linalg as la
import matplotlib as mpl
import matplotlib.pyplot as plt

from MlsSim import MlsSim

def g(points):
    return np.zeros(len(points), dtype='float64')

N=4
Nquad=1
support=-1
form='cubic'
method='galerkin'
quadrature='uniform'
mls = MlsSim(N, g, Nquad, support, form, method, quadrature)

# clear the current figure, if opened, and set parameters
fig = plt.gcf()
fig.clf()
fig.set_size_inches(15,4.5)
mpl.rc('axes', titlesize='xx-large', labelsize='x-large')
mpl.rc('xtick', labelsize='large')
mpl.rc('ytick', labelsize='large')
plt.subplots_adjust(hspace = 0.3, wspace = 0.25)
plt.rc('axes', axisbelow=True)

plt.subplot(131)
plt.scatter(mls.nodes[:,0], mls.nodes[:,1], s=100)
plt.scatter(mls.quads[:,0], mls.quads[:,1])
plt.xlabel(r'$x$')
plt.ylabel(r'$y$')
plt.title('1/cell')
# plt.xlim([0.0, 1.0])
# plt.ylim([0.0, 1.0])
plt.margins(0.0)
plt.xticks(np.arange(N+1)/N)
plt.yticks(np.arange(N+1)/N)
plt.grid()


Nquad=2
mls = MlsSim(N, g, Nquad, support, form, method, quadrature)

plt.subplot(132)
plt.scatter(mls.nodes[:,0], mls.nodes[:,1], s=100)
plt.scatter(mls.quads[:,0], mls.quads[:,1])
plt.xlabel(r'$x$')
plt.title('4/cell, uniform spacing')
# plt.xlim([0.0, 1.0])
# plt.ylim([0.0, 1.0])
plt.margins(0.0)
plt.xticks(np.arange(N+1)/N)
plt.yticks(np.arange(N+1)/N)
plt.grid()

quadrature='gaussian'
mls = MlsSim(N, g, Nquad, support, form, method, quadrature)

plt.subplot(133)
plt.scatter(mls.nodes[:,0], mls.nodes[:,1], s=100)
plt.scatter(mls.quads[:,0], mls.quads[:,1])
plt.xlabel(r'$x$')
plt.title('4/cell, Gaussian spacing')
# plt.xlim([0.0, 1.0])
# plt.ylim([0.0, 1.0])
plt.margins(0.0)
plt.xticks(np.arange(N+1)/N)
plt.yticks(np.arange(N+1)/N)
plt.grid()

plt.savefig("MLS_points.pdf", bbox_inches='tight', pad_inches=0)